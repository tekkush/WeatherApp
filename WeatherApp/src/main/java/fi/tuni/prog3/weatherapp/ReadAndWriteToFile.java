package fi.tuni.prog3.weatherapp;

import java.io.*;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.JsonArray;
import com.google.gson.JsonObject;
import com.google.gson.JsonParser;

public class ReadAndWriteToFile implements iReadAndWriteToFile {
    private static final String FILE_PATH = "location_history.json";
    private static final int MAX_HISTORY_SIZE = 5;

    private List<String> locationHistory;
    private List<String> favorites;
    /**
    * Creates and instance of ReadAndWrite class and two arrays for location history and
    * favorite locations
    */
    public ReadAndWriteToFile() {
        locationHistory = new ArrayList<>();
        favorites = new ArrayList<>();
        try {
            readFromFile(FILE_PATH);
        } catch (Exception e) {}
    }
    /**
    * Reads favorite and history from JSON file and adds it to private attributes
    * @param filename the name of the JSON file
    * @return JSON object as a String
    */
    @Override
    public String readFromFile(String fileName) throws Exception {

        try (Reader reader = new BufferedReader(new FileReader(fileName))) {
            JsonParser parser = new JsonParser();
            JsonObject jsonObject = parser.parse(reader).getAsJsonObject();

            JsonArray historyArray = jsonObject.getAsJsonArray("history");
            locationHistory.clear();
            for (int i = 0; i < historyArray.size(); i++) {
                locationHistory.add(historyArray.get(i).getAsString());
            }

            JsonArray favoritesArray = jsonObject.getAsJsonArray("favorites");
            favorites.clear();
            for (int i = 0; i < favoritesArray.size(); i++) {
                favorites.add(favoritesArray.get(i).getAsString());
            }

            return jsonObject.toString();
        } catch (IOException e) {
            throw new Exception("Error reading from file", e);
        }
    }

    /**
    * Generates JSON file and writes content generated by generateJsonContent()
    * @param fileName name of JSON file
    * @return boolean returns true if file was written successfully
    */
    @Override
    public boolean writeToFile(String fileName) throws Exception {

        try (Writer writer = new BufferedWriter(new FileWriter(fileName))) {
            String jsonContent = generateJsonContent();
            writer.write(jsonContent);
            return true;
        } catch (IOException e) {
            throw new Exception("Error writing to file", e);
        }
    }
    /**
    * Generates JSON file with keys history and favorites
    * @return String JsonObject as a string
    */
    private String generateJsonContent() {
        JsonObject jsonObject = new JsonObject();

        JsonArray historyArray = new JsonArray();
        for (String location : locationHistory) {
            historyArray.add(location);
        }

        JsonArray favoritesArray = new JsonArray();
        for (String favorite : favorites) {
            favoritesArray.add(favorite);
        }

        jsonObject.add("history", historyArray);
        jsonObject.add("favorites", favoritesArray);

        return jsonObject.toString();
    }
    /**
    * Adds a location to history
    * @param String location name of the location
    * return void
    */
    public void addToHistory(String location) {
        try {this.readFromFile(FILE_PATH);
        } catch (Exception e) {}
        
        this.locationHistory.add(0, location);

        if (locationHistory.size() > MAX_HISTORY_SIZE) {
            locationHistory = locationHistory.subList(0, MAX_HISTORY_SIZE);
        }

        try {
            writeToFile(FILE_PATH);
        } catch (Exception e) {}
    }

    /**
    * Adds a location to favorites
    * @param String location name of the location
    * @return void
    */
    public void addToFavorites(String location) {
        favorites.add(0, location);

        try {
            writeToFile(FILE_PATH);

        } catch (Exception e) {}
    }

    /**
    * Removes a location from favorites
    * @param String location name of the location
    * @return void
    */
    public void removeFromFavorites(String location) {
        favorites.remove(location);
        try {
            writeToFile(FILE_PATH);
        } catch (Exception e) {}
    }

    /**
    * @returns the last location in the history
    */
    public String getLast() {
        return locationHistory.isEmpty() ? "" : locationHistory.get(0);
    }

    /**
    * @returns an attribute favorites
    */
    public List<String> getFav(){
        return this.favorites;
    }

    /**
    * @returns an attribute locationHistory
    */
    public List<String> getHis(){
        return this.locationHistory;
    }
}
